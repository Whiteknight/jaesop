namespace JavaScript[HLL] { namespace jsop_main
{
    const string ATTR_NAME_PROTOTYPE = "prototype";
    const string ATTR_NAME_CONSTRUCTOR = "constructor";
    const string ATTR_NAME_ATTRIBUTES = "attributes";
    const string PROP_NAME_CODE = "!!!code!!!";
    const string PROP_NAME_JSFUNC = "!!!jsfunction!!!";

    namespace JSObject
    {
        function error(string fmt, var args[slurpy])
        {
            die(sprintf("JSObject: " + fmt, args));
        }

        function get_prototype(var jsobj)
        {
            int isa_jsobj = 0;
            var jsobj_class = class JSObject;
            ${ isa isa_jsobj, jsobj, jsobj_class };
            if (isa_jsobj) {
                var proto = null;
                ${ getattribute proto, jsobj, jsobj_class, ATTR_NAME_PROTOTYPE };
                return proto;
            }
            return null;
        }

        function get_constructor(var jsobj)
        {
            int isa_jsobj = 0;
            var jsobj_class = class JSObject;
            ${ isa isa_jsobj, jsobj, jsobj_class };
            if (isa_jsobj) {
                var proto = null;
                ${ getattribute proto, jsobj, jsobj_class, ATTR_NAME_CONSTRUCTOR };
                return proto;
            }
            return null;
        }

        function box_func(var f)
        {
            if (f instanceof JSFunction)
                return f;
            var jsf;
            ${ getprop jsf, PROP_NAME_JSFUNC, f };
            if (jsf == null)
                jsf = new JSFunction(f);
            return jsf;
        }

        function construct(var constructor, var args [slurpy])
        {
            var con_proto = get_prototype(constructor);
            var jsobj = new JSObject(con_proto, constructor);
            jsobj.*constructor(args:[flat]);
            return jsobj;
        }

        function invoke(var obj, var args [slurpy])
        {
            var f = null;
            ${ getprop f, PROP_NAME_CODE, obj };
            if (f == null)
                error("Cannot invoke non-code object");
            return obj.*f(args);
        }
    }

    class JSObject
    {
        var attributes;

        function JSObject(var prototype, var constructor, var func_ref [optional], int has_func [opt_flag])
        {
            var jsobj_class = class JSObject;
            var attrs = {
                ATTR_NAME_PROTOTYPE : prototype,
                ATTR_NAME_CONSTRUCTOR : constructor
            };
            ${ setattribute self, jsobj_class, ATTR_NAME_ATTRIBUTES, attrs };
        }

        function get_attr_str[vtable](string key)
        {
            var jsobj_class = class JSObject;
            var attrs;
            ${ getattribute attrs, self, jsobj_class, ATTR_NAME_ATTRIBUTES };
            if (exists attrs[key])
                return attrs[key];
            if (exists attrs[ATTR_NAME_PROTOTYPE]) {
                var proto = attrs[ATTR_NAME_PROTOTYPE];
                if (proto != null)
                    return proto.*key;
            }
            return null;
        }

        function set_attr_str[vtable](string key, var value)
        {
            var jsobj_class = class JSObject;
            var attrs;
            ${ getattribute attrs, self, jsobj_class, ATTR_NAME_ATTRIBUTES };
            attrs[key] = value;
        }

        function get_pmc_keyed[vtable](var key)
        {
            return self.*(string(key));
        }

        function set_pmc_keyed[vtable](var key, var value)
        {
            self.*(string(key)) = value;
        }

        /*
        function get_pmc_keyed_int[vtable](int key)
        {
        }

        function set_pmc_keyed_int[vtable](int key, var value)
        {
        }
        */
    }

    class JSFunction : JSObject
    {
        function JSFunction(var func)
        {
            self.JSObject();
            ${ setprop self, PROP_NAME_CODE, func };
            ${ setprop func, PROP_NAME_JSFUNC, self };
        }
    }
}}
