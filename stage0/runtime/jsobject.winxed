namespace JavaScript
{
    const string ATTR_NAME_PROTOTYPE = "prototype";
    const string ATTR_NAME_CONSTRUCTOR = "constructor";
    const string ATTR_NAME_ATTRIBUTES = "attributes";
    const string PROP_NAME_JSFUNC = "!!!jsfunction!!!";

    /* Global value store
    */

    function __global_store[anon]()
    {
        var store = {};
        while(1)
            yield store;
    }

    function __store_global(string name, var jsobj)
    {
        __global_store()[name] = jsobj;
    }

    function __fetch_global(string name)
    {
        return __global_store()[name];
    }

    /* JSObject
    */

    // JSObject helper methods
    namespace JSObject
    {
        // Helper method to throw helpful errors
        function error(string fmt, var args[slurpy])
        {
            die(sprintf("JSObject: " + fmt, args));
        }

        // Box a native Parrot Sub PMC into a JSObject with Function
        // prototype/constructor. Allows setting a custom prototype if one
        // is available.
        function box_function(var f, var proto [optional], int has_proto [opt_flag])
        {
            if (f instanceof JSObject)
                return f;

            var jsf;
            ${ getprop jsf, PROP_NAME_JSFUNC, f };
            if (jsf == null) {
                var function_constructor = __fetch_global("Function");
                jsf = construct(proto, function_constructor, f);

                // Cache the JSObject as a property on the Sub, so we don't
                // try to re-box it later
                ${ setprop f, PROP_NAME_JSFUNC, jsf };
            }
            return jsf;
        }

        function construct(var proto, var constructor,
                var constr_args [slurpy],
                var jsobj_values [slurpy,named])
        {
            if (!(constructor instanceof JSObject))
                constructor = box_function(constructor, null);
            if (proto == null)
                proto = get_prototype(constructor);
            var jsobj = new JSObject(proto, constructor, jsobj_values:[flat,named]);
            constructor(constr_args:[flat], jsobj:[named('this')]);
            return jsobj;
        }
    }

    // JSObject class definition. All objects in JavaScript are JSObjects with
    // different constructors and prototypes
    class JSObject
    {
        var attributes;

        function JSObject(var prototype, var constructor, var values [slurpy,named])
        {
            var jsobj_class = class JSObject;
            if (prototype == null && constructor != null)
                prototype = constructor.*"prototype";
            var attrs = {
                ATTR_NAME_PROTOTYPE : prototype,
                ATTR_NAME_CONSTRUCTOR : constructor
            };
            for (string key in values)
                attrs[key] = values[key];
            ${ setattribute self, jsobj_class, ATTR_NAME_ATTRIBUTES, attrs };
        }

        /* VTABLES
            These implement most of the JS-visible behaviors of JSObject
        */

        function get_attr_str[vtable](string key)
        {
            var jsobj_class = class JSObject;
            var attrs;
            ${ getattribute attrs, self, jsobj_class, ATTR_NAME_ATTRIBUTES };
            if (exists attrs[key])
                return attrs[key];

            // If not, we can try to look in the prototype
            if (key != ATTR_NAME_PROTOTYPE && (exists attrs[ATTR_NAME_PROTOTYPE])) {
                var proto = attrs[ATTR_NAME_PROTOTYPE];
                if (proto != null)
                    return proto.*key;
            }
            return null;
        }

        function set_attr_str[vtable](string key, var value)
        {
            var jsobj_class = class JSObject;
            var attrs;
            ${ getattribute attrs, self, jsobj_class, ATTR_NAME_ATTRIBUTES };
            attrs[key] = value;
        }

        function get_pmc_keyed[vtable](var key)
        {
            return self.*(string(key));
        }

        function set_pmc_keyed[vtable](var key, var value)
        {
            self.*(string(key)) = value;
        }

        function get_pmc_keyed_int[vtable](int key)
        {
            var a = self.*"__ARRAY_CONTENTS__";
            if (a == null)
                return null;
            if (elements(a) >= key)
                return a[key];
            return self.*(string(key));
        }

        function set_pmc_keyed_int[vtable](int key, var value)
        {
            var a = self.*"__ARRAY_CONTENTS__";
            if (a == null)
                self.*(string(key)) = value;
            else
                a[key] = value;
        }

        function does[vtable](string role)
        {
            var roles = self.*"__DOES_ROLES__";
            if (roles == null)
                return false;
            for (string r in roles) {
                if (r == role)
                    return true;
            }
            return false;
        }

        function get_iter[vtable]()
        {
            var iterf = self.*"__GET_ITER__";
            if (iterf != null)
                return self.*iterf();
            var jsobj_class = class JSObject;
            var attrs;
            ${ getattribute attrs, self, jsobj_class, ATTR_NAME_ATTRIBUTES };
            var attrs_iter;
            ${ iter attrs_iter, attrs };
            return attrs_iter;
        }

        function get_string[vtable]()
        {
            var s = self.*"__STRING_CONTENTS__";
            if (s != null)
                return string(s);
            s = var(self.*"toString")(self:[named('this')]);
            return string(s);
        }

        function invoke[vtable](var args [slurpy], var this [named('this'),optional])
        {
            var f = self.*"__CODE_PMC__";
            if (f == null) {
                string type_name = self.get_type_name();
                error("Cannot invoke object of type " + type_name);
            }
            var result = f(args:[flat], this:[named('this')]);
            return result;
        }

        function elements[vtable]()
        {
            var a = self.*"__ARRAY_CONTENTS__";
            if (a == null)
                return 0;
            return elements(a);
        }

        /* Helper Methods
            These methods are for internal use only. They are not visible from
            JS code. Methods callable from JS are stored in the attrs hash.
        */

        function get_type_name()
        {
            var constructor = self.*"constructor";
            if (constructor == null)
                return "Object";
            var toString = constructor.*"toString";
            return toString(constructor);
        }

        function get_prototype()
        {
            return self.*"prototype";
        }

        function get_constructor()
        {
            self.*"constructor";
        }

        function get_attribute_hash()
        {
            var jsobj_class = class JSObject;
            var attrs;
            ${ getattribute attrs, self, jsobj_class, ATTR_NAME_ATTRIBUTES };
            return attrs;
        }
    }

    /* Built-in types
    */

    // Function is the root type. It provides basic invokable behavior and
    // a few other details.
    namespace Function
    {
        function get_Function_prototype[anon]()
        {
            var p = new JSObject(null, null);
            return p;
        }

        function setup_Function_prototype[anon](var p)
        {
            using JavaScript.JSObject.box_function;

            p.*"toString" = box_function(function(var this [named]) {
                var code_pmc = this.*"__CODE_PMC__";
                if (code_pmc != null)
                    return string(code_pmc);
                string type_name = this.get_type_name();
                string r = "[Object " + type_name + "]";
                return r;
            });

            p.*"call" = box_function(function(var obj, var args[slurpy], var this [named]) {
                return this(args:[flat], obj:[named('this')]);
            });

            p.*"apply" = box_function(function(var obj, var args, var this [named]) {
                return this(args:[flat], obj:[named('this')]);
            });

            p.*"__DOES_ROLES__" = ["hash"];
        }

        function Function(var sub_code, var this [named('this')])
        {
            this.*"__CODE_PMC__" = sub_code;
            this.*"length" = sub_code.arity();
        }
    }

    // Object is what most objects are.
    namespace Object
    {
        function get_Object_prototype[anon](var func_proto)
        {
            using JavaScript.JSObject.box_function;
            var p = new JSObject(func_proto, null);

            p.*"hasOwnProperty" = box_function(function(string key, var this [named]) {
                var attrs = this.get_attribute_hash();
                return exists attrs[key] ? true : false;
            });

            p.*"getPrototypeOf" = box_function(function(var this [named]) {
                return this.get_prototype();
            });

            return p;
        }

        function Object(var this [named('this')])
        {
        }
    }

    // Array is for low-level integer-keyed arrays. It's a thick wrapper around
    // ResizablePMCArray
    namespace Array
    {
        function box_parrot_array[anon](var array)
        {
            var array_constructor = __fetch_global("__Array");
            return JavaScript.JSObject.construct(null, array_constructor, array);
        }

        function get_array_contents[anon](var jsobj)
        {
            var a = jsobj.get_attribute_hash();
            return a["__ARRAY_CONTENTS__"];
        }

        function get_Array_prototype[anon](var obj_proto)
        {
            using JavaScript.JSObject.box_function;
            var p = new JSObject(obj_proto, null);

            p.*"__GET_ITER__" = box_function(function(var this [named]) {
                // TODO: Actually, we need to iterate over the array contents
                //       AND the rest of the JSObject attributes
                var c = this.get_attribute_hash();
                var c_iter;
                ${ iter c_iter, c };
                return c_iter;
            });

            p.*"push" = box_function(function(var item, var this [named]) {
                var a = this.*"__ARRAY_CONTENTS__";
                push(a, item);
                this.*"length" = elements(a);
            });

            p.*"pop" = box_function(function(var this [named]) {
                var a = this.*"__ARRAY_CONTENTS__";
                var r = a.pop();
                this.*"length" = elements(a);
                return r;
            });

            p.*"__DOES_ROLES__" = ["array", "hash"];
            return p;
        }

        function Array(var args [slurpy], var this [named('this')])
        {
            var a = this.get_attribute_hash();
            a["__ARRAY_CONTENTS__"] = args;
            a["length"] = elements(args);
        }

        function Array_internal(var array, var this [named("this")])
        {
            var a = this.get_attribute_hash();
            a["__ARRAY_CONTENTS__"] = array;
            a["length"] = elements(array);
            a[ATTR_NAME_CONSTRUCTOR] = __fetch_global("Array");
        }
    }

    namespace String
    {
        function box_parrot_string(string s)
        {
            var string_constructor = __fetch_global("String");
            return JavaScript.JSObject.construct(null, string_constructor, s);
        }

        function get_string_contents[anon](var jsobj)
        {
            var a = jsobj.get_attribute_hash();
            var s = a["__STRING_CONTENTS__"];
            return string(s);
        }

        function get_String_prototype[anon](var obj_proto)
        {
            using JavaScript.JSObject.box_function;
            var p = new JSObject(obj_proto, null);

            p.*"toString" = box_function(function(var this [named]) {
                return this;
            });

            p.*"indexOf" = box_function(function(string search, int start [optional], int has_s [opt_flag], var this [named]) {
                if (!has_s)
                    start = 0;
                string s = get_string_contents(this);
                int idx;
                ${ index idx, s, search, start };
                return idx;
            });

            p.*"split" = box_function(function(string delim, var this [named('this')]) {
                string s = get_string_contents(this);
                var a = split(delim, s);
                return JavaScript.JSObject.Array.box_parrot_array(a);
            });

            p.*"substr" = box_function(function(int start, int len [optional], int has_len [opt_flag], var this [named('this')]) {
                string s = get_string_contents(this);
                string r;
                if (has_len)
                    r = substr(s, start, len);
                else
                    r = substr(s, start);
                return box_parrot_string(r);
            });

            p.*"valueOf" = box_function(function(var this [named]) {
                string s = get_string_contents(this);
                return s;
            });

            return p;
        }

        function String(string str, var this [named('this')])
        {
            var a = this.get_attribute_hash();
            a["__STRING_CONTENTS__"] = var(str);
            a["length"] = length(str);
        }
    }

    /* Setup routine
        Setup the various built-in types
    */

    function __BOOTSTRAP_FUNCTION__[anon]()
    {
        using JavaScript.Function.Function;
        var func_proto = JavaScript.Function.get_Function_prototype();
        var func = new JSObject(func_proto, null);
        ${ setprop Function, PROP_NAME_JSFUNC, func };
        func.*"constructor" = func;
        Function(Function, func:[named('this')]);
        __store_global("Function", func);
        JavaScript.Function.setup_Function_prototype(func_proto);
        return func_proto, func;
    }

    function __SETUP__[anon,init,load]()
    {
        var func_proto;
        var func;
        :(func_proto, func) = __BOOTSTRAP_FUNCTION__();

        using JavaScript.Object.Object;
        var obj_proto = JavaScript.Object.get_Object_prototype(func_proto);
        var obj = JavaScript.JSObject.box_function(Object, obj_proto);
        __store_global("Object", obj);

        using JavaScript.Array.Array;
        using JavaScript.Array.Array_internal;
        var array_proto = JavaScript.Array.get_Array_prototype(obj_proto);
        var array = JavaScript.JSObject.box_function(Array, array_proto);
        __store_global("Array", array);
        var array_internal = JavaScript.JSObject.box_function(Array_internal, array_proto);
        __store_global("__Array", array_internal);

        using JavaScript.String.String;
        var string_proto = JavaScript.String.get_String_prototype(obj_proto);
        var string_const = JavaScript.JSObject.box_function(String, string_proto);
        __store_global("String", string_const);
    }
}
